"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[736],{3210:function(e){e.exports=JSON.parse('[{"entryPoints":[{"index":true,"label":"Index","reflection":{"id":0,"name":"ethereal-react","kind":1,"kindString":"Project","flags":{},"originalName":"","children":[{"id":65,"name":"ERC165_ABI","kind":32,"kindString":"Variable","flags":{},"comment":{"shortText":"An ABI definition for ERC165."},"sources":[{"fileName":"abi.ts","line":18,"character":13}],"type":{"type":"typeOperator","operator":"readonly","target":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}},"defaultValue":"...","permalink":"/ethereal-react/api/ethereal-react#ERC165_ABI","previousId":16,"nextId":64},{"id":64,"name":"ERC20_ABI","kind":32,"kindString":"Variable","flags":{},"comment":{"shortText":"A minimal ABI definition for an ERC20 token."},"sources":[{"fileName":"abi.ts","line":4,"character":13}],"type":{"type":"typeOperator","operator":"readonly","target":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}},"defaultValue":"...","permalink":"/ethereal-react/api/ethereal-react#ERC20_ABI","previousId":65,"nextId":66},{"id":66,"name":"ERC721_ABI","kind":32,"kindString":"Variable","flags":{},"comment":{"shortText":"An ABI definition for an ERC721 (non-fungible) token.\\nThis ABI includes common extensions for metadata, and enumerability."},"sources":[{"fileName":"abi.ts","line":60,"character":13}],"type":{"type":"typeOperator","operator":"readonly","target":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}},"defaultValue":"...","permalink":"/ethereal-react/api/ethereal-react#ERC721_ABI","previousId":64},{"id":4,"name":"Provider","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"provider.tsx","line":16,"character":16}],"signatures":[{"id":5,"name":"Provider","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":6,"name":"props","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"ProviderProps"}}],"type":{"type":"reference","name":"Element"}}],"permalink":"/ethereal-react/api/ethereal-react/function/Provider","nextId":16},{"id":16,"name":"WalletProvider","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"wallet.tsx","line":55,"character":16}],"signatures":[{"id":17,"name":"WalletProvider","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":18,"name":"props","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","name":"WalletProviderProps"}}],"type":{"type":"reference","name":"Element"}}],"permalink":"/ethereal-react/api/ethereal-react/function/WalletProvider","previousId":4,"nextId":52},{"id":52,"name":"useBalance","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"accounts.ts","line":40,"character":16}],"signatures":[{"id":53,"name":"useBalance","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Loads the current Ethers balance (in wei) of the provided address.\\nThis hook will suspend while it loads.","returns":"The current balance of the address, in wei.","tags":[{"tag":"see","text":"https://docs.ethers.io/v5/single-page/#/v5/api/providers/provider/-%23-Provider-getBalance\\n"}]},"parameters":[{"id":54,"name":"address","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"shortText":"The address that you would like to check the balance of. If it is not provided, then the address of the connected wallet is used instead."},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","name":"BigNumber"}}],"permalink":"/ethereal-react/api/ethereal-react/function/useBalance","previousId":16,"nextId":67},{"id":67,"name":"useBlock","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"blocks.ts","line":47,"character":16}],"signatures":[{"id":68,"name":"useBlock","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Loads the most recent block from the network.\\nAs new blocks are added to the network, this hook will automatically load the new block data.\\nThis hook will suspend while it loads.","returns":"A tuple with the `Block` object from `ethers`, and a boolean indicating if the block is currently being refetched.","tags":[{"tag":"see","text":"https://docs.ethers.io/v5/api/providers/provider/#Provider-getBlock"},{"tag":"see","text":"https://docs.ethers.io/v5/api/providers/types/#providers-Block\\n"}]},"type":{"type":"typeOperator","operator":"readonly","target":{"type":"tuple","elements":[{"type":"reference","name":"Block"},{"type":"intrinsic","name":"boolean"}]}}}],"permalink":"/ethereal-react/api/ethereal-react/function/useBlock","previousId":52,"nextId":7},{"id":7,"name":"useConnectToWallet","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"wallet.tsx","line":93,"character":16}],"signatures":[{"id":8,"name":"useConnectToWallet","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"typeOperator","operator":"readonly","target":{"type":"tuple","elements":[{"type":"reflection","declaration":{"id":9,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":10,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":11,"name":"args","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"tuple"}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise"}}]}},{"type":"reflection","declaration":{"id":12,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":15,"name":"data","kind":1024,"kindString":"Property","flags":{},"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"intrinsic","name":"void"}]}},{"id":14,"name":"error","kind":1024,"kindString":"Property","flags":{},"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","name":"Error"}]}},{"id":13,"name":"loading","kind":1024,"kindString":"Property","flags":{},"type":{"type":"intrinsic","name":"boolean"}}],"groups":[{"title":"Properties","kind":1024,"children":[15,14,13]}]}}]}}}],"permalink":"/ethereal-react/api/ethereal-react/function/useConnectToWallet","previousId":67,"nextId":25},{"id":25,"name":"useContract","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"contracts.ts","line":44,"character":16}],"signatures":[{"id":26,"name":"useContract","kind":4096,"kindString":"Call signature","flags":{},"typeParameter":[{"id":27,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"any"},{"type":"reference","id":27,"name":"T"}],"name":"ContractInstance"},"default":{"type":"reference","name":"Contract"}}],"parameters":[{"id":28,"name":"address","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}},{"id":29,"name":"typechainFactoryOrABI","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"reference","name":"ContractInterface"},{"type":"reference","typeArguments":[{"type":"reference","id":27,"name":"T"}],"name":"ContractFactory"}]}}],"type":{"type":"reference","id":27,"name":"T"}}],"permalink":"/ethereal-react/api/ethereal-react/function/useContract","previousId":7,"nextId":76},{"id":76,"name":"useENSForAddress","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"ens.ts","line":32,"character":16}],"signatures":[{"id":77,"name":"useENSForAddress","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":78,"name":"address","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"intrinsic","name":"string"}]}}],"permalink":"/ethereal-react/api/ethereal-react/function/useENSForAddress","previousId":25,"nextId":19},{"id":19,"name":"useLogout","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"wallet.tsx","line":40,"character":16}],"signatures":[{"id":20,"name":"useLogout","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"reflection","declaration":{"id":21,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":22,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"intrinsic","name":"void"}}]}}}],"permalink":"/ethereal-react/api/ethereal-react/function/useLogout","previousId":76,"nextId":69},{"id":69,"name":"useOnBlock","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"blocks.ts","line":12,"character":16}],"signatures":[{"id":70,"name":"useOnBlock","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Listens to the network and invokes a callback whenever a new block is added to the network.\\nThis hook will not suspend."},"parameters":[{"id":71,"name":"listener","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"A function that will be called every time a new block is added to the network.\\n"},"type":{"type":"reference","name":"Listener"}}],"type":{"type":"intrinsic","name":"void"}}],"permalink":"/ethereal-react/api/ethereal-react/function/useOnBlock","previousId":19,"nextId":1},{"id":1,"name":"useProvider","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"provider.tsx","line":34,"character":16}],"signatures":[{"id":2,"name":"useProvider","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":3,"name":"name","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"},"defaultValue":"\\"default\\""}],"type":{"type":"reference","name":"EtherealProvider"}}],"permalink":"/ethereal-react/api/ethereal-react/function/useProvider","previousId":69,"nextId":30},{"id":30,"name":"useReadContract","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"contracts.ts","line":59,"character":16}],"signatures":[{"id":31,"name":"useReadContract","kind":4096,"kindString":"Call signature","flags":{},"typeParameter":[{"id":32,"name":"TContract","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"any"},{"type":"reference","id":32,"name":"TContract"}],"name":"ContractInstance"},"default":{"type":"intrinsic","name":"any"}},{"id":33,"name":"TFunctionName","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"string"},"default":{"type":"intrinsic","name":"string"}}],"parameters":[{"id":34,"name":"contract","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"reference","name":"Contract"},{"type":"reference","id":32,"name":"TContract"}]}},{"id":35,"name":"functionName","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":33,"name":"TFunctionName"}},{"id":36,"name":"args","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"reference","typeArguments":[{"type":"indexedAccess","indexType":{"type":"reference","id":33,"name":"TFunctionName"},"objectType":{"type":"reference","typeArguments":[{"type":"reference","id":32,"name":"TContract"}],"name":"ContractFunctions"}}],"name":"Parameters"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"indexedAccess","indexType":{"type":"reference","id":33,"name":"TFunctionName"},"objectType":{"type":"reference","typeArguments":[{"type":"reference","id":32,"name":"TContract"}],"name":"ContractFunctions"}}],"name":"ReturnType"}],"name":"Awaited"}}],"permalink":"/ethereal-react/api/ethereal-react/function/useReadContract","previousId":1,"nextId":79},{"id":79,"name":"useResolveENS","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"ens.ts","line":11,"character":16}],"signatures":[{"id":80,"name":"useResolveENS","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":81,"name":"ensName","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"string"}}],"permalink":"/ethereal-react/api/ethereal-react/function/useResolveENS","previousId":30,"nextId":55},{"id":55,"name":"useTokenBalance","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"tokens.ts","line":20,"character":16}],"signatures":[{"id":56,"name":"useTokenBalance","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Gets the current token balance for a specified address, or the currently-connected wallet.\\nThis should be used on ERC20 or ERC721 contracts that implement the `balanceOf(address)` function."},"typeParameter":[{"id":61,"name":"T","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"union","types":[{"type":"reference","name":"Contract"},{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":57,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":58,"name":"balanceOf","kind":2048,"kindString":"Method","flags":{},"signatures":[{"id":59,"name":"balanceOf","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":60,"name":"address","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"BigNumber"}],"name":"Promise"}}]}],"groups":[{"title":"Methods","kind":2048,"children":[58]}]}}],"name":"ContractInstance"}]},"default":{"type":"reference","name":"Contract"}}],"parameters":[{"id":62,"name":"contract","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The smart contract address for the token. Should be an ERC20 or ERC721 contract."},"type":{"type":"reference","id":61,"name":"T"}},{"id":63,"name":"address","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"shortText":"The address. Defaults to the address of the connected wallet.\\n"},"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"intrinsic","name":"string"}]}}],"type":{"type":"reference","name":"BigNumber"}}],"permalink":"/ethereal-react/api/ethereal-react/function/useTokenBalance","previousId":79,"nextId":50},{"id":50,"name":"useUserAddress","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"accounts.ts","line":21,"character":16}],"signatures":[{"id":51,"name":"useUserAddress","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Loads the public address of the currently connected wallet.\\nThis hook will suspend while it loads."},"type":{"type":"intrinsic","name":"string"}}],"permalink":"/ethereal-react/api/ethereal-react/function/useUserAddress","previousId":55,"nextId":72},{"id":72,"name":"useWaitForTransaction","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"transactions.ts","line":16,"character":16}],"signatures":[{"id":73,"name":"useWaitForTransaction","kind":4096,"kindString":"Call signature","flags":{},"comment":{"shortText":"Waits for a contract transaction (from useWriteContract) to be confirmed on the blockchain."},"parameters":[{"id":74,"name":"transaction","kind":32768,"kindString":"Parameter","flags":{},"comment":{},"type":{"type":"reference","name":"ContractTransaction"}},{"id":75,"name":"confirmations","kind":32768,"kindString":"Parameter","flags":{},"comment":{"shortText":"The number of confirmations to wait for. Defaults to 1.\\n"},"type":{"type":"intrinsic","name":"number"},"defaultValue":"1"}],"type":{"type":"reference","name":"ContractReceipt"}}],"permalink":"/ethereal-react/api/ethereal-react/function/useWaitForTransaction","previousId":50,"nextId":23},{"id":23,"name":"useWeb3Modal","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"wallet.tsx","line":28,"character":16}],"signatures":[{"id":24,"name":"useWeb3Modal","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"reference","name":"Core"}}],"permalink":"/ethereal-react/api/ethereal-react/function/useWeb3Modal","previousId":72,"nextId":37},{"id":37,"name":"useWriteContract","kind":64,"kindString":"Function","flags":{},"sources":[{"fileName":"contracts.ts","line":70,"character":16}],"signatures":[{"id":38,"name":"useWriteContract","kind":4096,"kindString":"Call signature","flags":{},"typeParameter":[{"id":39,"name":"TContract","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"any"},{"type":"reference","id":39,"name":"TContract"}],"name":"ContractInstance"},"default":{"type":"intrinsic","name":"any"}},{"id":40,"name":"TFunctionName","kind":131072,"kindString":"Type parameter","flags":{},"type":{"type":"intrinsic","name":"string"},"default":{"type":"intrinsic","name":"string"}}],"parameters":[{"id":41,"name":"contract","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"reference","name":"Contract"},{"type":"reference","id":39,"name":"TContract"}]}},{"id":42,"name":"functionName","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":40,"name":"TFunctionName"}}],"type":{"type":"typeOperator","operator":"readonly","target":{"type":"tuple","elements":[{"type":"reflection","declaration":{"id":43,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"signatures":[{"id":44,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":45,"name":"args","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"reference","typeArguments":[{"type":"indexedAccess","indexType":{"type":"reference","id":40,"name":"TFunctionName"},"objectType":{"type":"reference","typeArguments":[{"type":"reference","id":39,"name":"TContract"}],"name":"ContractFunctions"}}],"name":"Parameters"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"ContractTransaction"}],"name":"Promise"}}]}},{"type":"reflection","declaration":{"id":46,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":49,"name":"data","kind":1024,"kindString":"Property","flags":{},"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","name":"ContractTransaction"}]}},{"id":48,"name":"error","kind":1024,"kindString":"Property","flags":{},"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","name":"Error"}]}},{"id":47,"name":"loading","kind":1024,"kindString":"Property","flags":{},"type":{"type":"intrinsic","name":"boolean"}}],"groups":[{"title":"Properties","kind":1024,"children":[49,48,47]}]}}]}}}],"permalink":"/ethereal-react/api/ethereal-react/function/useWriteContract","previousId":23,"nextId":65}],"groups":[{"title":"Functions","kind":64,"children":[4,16,52,67,7,25,76,19,69,1,30,79,55,50,72,23,37]},{"title":"Variables","kind":32,"children":[65,64,66]}],"sources":[{"fileName":"index.ts","line":1,"character":0}],"permalink":"/ethereal-react/api/ethereal-react"},"urlSlug":"ethereal-react"}],"packageName":"ethereal-react","packageVersion":"0.1.0"}]')}}]);