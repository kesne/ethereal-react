"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[213],{7522:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var r=n(9901);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=l(n),m=a,f=u["".concat(s,".").concat(m)]||u[m]||d[m]||o;return n?r.createElement(f,c(c({ref:t},p),{},{components:n})):r.createElement(f,c({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,c=new Array(o);c[0]=u;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,c[1]=i;for(var l=2;l<o;l++)c[l]=n[l];return r.createElement.apply(null,c)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},4638:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return s},metadata:function(){return l},toc:function(){return p},default:function(){return u}});var r=n(3920),a=n(264),o=(n(9901),n(7522)),c=["components"],i={},s="Common ABIs",l={unversionedId:"advanced/ABIs",id:"advanced/ABIs",isDocsHomePage:!1,title:"Common ABIs",description:"To help make developing your dApps easier, we include a set of pre-built ABIs for common contracts. These ABIs can be used directly with the useContract hook, and easily extended.",source:"@site/docs/advanced/02-ABIs.md",sourceDirName:"advanced",slug:"/advanced/ABIs",permalink:"/ethereal-react/advanced/ABIs",editUrl:"https://github.com/kesne/ethereal-react/edit/main/packages/website/docs/advanced/02-ABIs.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"TypeChain Support",permalink:"/ethereal-react/advanced/typechain"},next:{title:"Blocks",permalink:"/ethereal-react/advanced/blocks"}},p=[{value:"ERC-20",id:"erc-20",children:[]},{value:"ERC-721",id:"erc-721",children:[]},{value:"Extending ABIs",id:"extending-abis",children:[]}],d={toc:p};function u(e){var t=e.components,n=(0,a.Z)(e,c);return(0,o.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"common-abis"},"Common ABIs"),(0,o.kt)("p",null,"To help make developing your dApps easier, we include a set of pre-built ",(0,o.kt)("a",{parentName:"p",href:"https://docs.ethers.io/v5/api/utils/abi/"},"ABIs")," for common contracts. These ABIs can be used directly with the ",(0,o.kt)("inlineCode",{parentName:"p"},"useContract")," hook, and easily extended."),(0,o.kt)("h2",{id:"erc-20"},"ERC-20"),(0,o.kt)("p",null,"The ABI for ",(0,o.kt)("a",{parentName:"p",href:"https://docs.openzeppelin.com/contracts/4.x/erc20"},"ERC-20 tokens")," is provided."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'import { ERC20_ABI, useContract } from "ethereal-react";\n\nconst contract = useContract(address, ERC20_ABI);\n')),(0,o.kt)("h2",{id:"erc-721"},"ERC-721"),(0,o.kt)("p",null,"The ABI for ",(0,o.kt)("a",{parentName:"p",href:"https://docs.openzeppelin.com/contracts/4.x/erc721"},"ERC-721 tokens")," is provided, and includes common extensions for token metadata as well."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'import { ERC721_ABI, useContract } from "ethereal-react";\n\nconst contract = useContract(address, ERC721_ABI);\n')),(0,o.kt)("h2",{id:"extending-abis"},"Extending ABIs"),(0,o.kt)("p",null,"The exported ABIs are arrays, and as such can be extended by spreading it into another array. For example, if you have an ERC721 token with a ",(0,o.kt)("inlineCode",{parentName:"p"},"mint")," method, you could create the ABI as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'import { ERC721_ABI } from "ethereal-react";\n\nconst MintableERC721 = [\n  // Copy all of the ERC721 ABIs:\n  ...ERC721_ABI,\n  // Add the `mint()` function:\n  "function mint()",\n];\n')))}u.isMDXComponent=!0}}]);